// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/google/wire"
	"github.com/tilau2328/cql/cmd/grpc/package/handler"
	"github.com/tilau2328/cql/src/go/package/adaptor/data/cql/repo/ddl"
	"github.com/tilau2328/cql/src/go/package/domain/service"
	"github.com/tilau2328/cql/src/go/package/shared/data/cql"
)

// Injectors from wire.go:

func Init(options cql.Options) (handler.Server, func(), error) {
	clusterConfig := cql.NewCluster(options)
	session, cleanup, err := cql.NewSession(clusterConfig)
	if err != nil {
		return handler.Server{}, nil, err
	}
	keySpaceRepo := ddl.NewKeySpaceRepo(session)
	tableRepo := ddl.NewTableRepo(session)
	ddlServiceOptions := service.DDLServiceOptions{
		KeySpaceProvider: keySpaceRepo,
		TableProvider:    tableRepo,
	}
	ddlService := service.NewDDL(ddlServiceOptions)
	ddlOptions := handler.DDLOptions{
		DDL: ddlService,
	}
	handlerDDL := handler.NewDDL(ddlOptions)
	dmlServiceOptions := service.DMLServiceOptions{}
	dmlService := service.NewDML(dmlServiceOptions)
	dmlOptions := handler.DMLOptions{
		DML: dmlService,
	}
	dml := handler.NewDML(dmlOptions)
	server := handler.NewServer(handlerDDL, dml)
	return server, func() {
		cleanup()
	}, nil
}

// wire.go:

var Set = wire.NewSet(wire.Struct(new(handler.DMLOptions), "*"), handler.NewDML, wire.Struct(new(handler.DDLOptions), "*"), handler.NewDDL, handler.NewServer)
