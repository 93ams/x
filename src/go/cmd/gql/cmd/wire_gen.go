// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/google/wire"
	"github.com/tilau2328/cql/src/go/cmd/gql/package/exec"
	"github.com/tilau2328/cql/src/go/cmd/gql/package/resolver"
	"github.com/tilau2328/cql/src/go/package/adaptor/data/cql/repo/ddl"
	"github.com/tilau2328/cql/src/go/package/domain/service"
	"github.com/tilau2328/cql/src/go/package/shared/api/gql"
	"github.com/tilau2328/cql/src/go/package/shared/data/cql"
)

// Injectors from wire.go:

func Init(options cql.Options, endpoint gql.Endpoint) (*gql.Server, func(), error) {
	clusterConfig := cql.NewCluster(options)
	session, cleanup, err := cql.NewSession(clusterConfig)
	if err != nil {
		return nil, nil, err
	}
	keySpaceRepo := ddl.NewKeySpaceRepo(session)
	tableRepo := ddl.NewTableRepo(session)
	ddlServiceOptions := service.DDLServiceOptions{
		KeySpaceProvider: keySpaceRepo,
		TableProvider:    tableRepo,
	}
	ddlService := service.NewDDL(ddlServiceOptions)
	dmlServiceOptions := service.DMLServiceOptions{}
	dmlService := service.NewDML(dmlServiceOptions)
	resolverResolver := resolver.NewResolver(ddlService, dmlService)
	config := exec.Config{
		Resolvers: resolverResolver,
	}
	executableSchema := exec.NewExecutableSchema(config)
	server := handler.NewDefaultServer(executableSchema)
	gqlServer := gql.NewServer(server, endpoint)
	return gqlServer, func() {
		cleanup()
	}, nil
}

// wire.go:

var Set = wire.NewSet(wire.Bind(new(exec.ResolverRoot), new(*resolver.Resolver)), resolver.NewResolver, wire.Struct(new(exec.Config), "Resolvers"), exec.NewExecutableSchema)
