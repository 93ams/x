// Code generated by MockGen. DO NOT EDIT.
// Source: dependencies.go

// Package provider is a generated GoMock package.
package provider

import (
	. "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	. "github.com/tilau2328/cql/package/domain/model"
	. "github.com/tilau2328/cql/package/shared/patch"
)

// MockKeySpaceProvider is a mock of KeySpaceProvider interface.
type MockKeySpaceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockKeySpaceProviderMockRecorder
}

// MockKeySpaceProviderMockRecorder is the mock recorder for MockKeySpaceProvider.
type MockKeySpaceProviderMockRecorder struct {
	mock *MockKeySpaceProvider
}

// NewMockKeySpaceProvider creates a new mock instance.
func NewMockKeySpaceProvider(ctrl *gomock.Controller) *MockKeySpaceProvider {
	mock := &MockKeySpaceProvider{ctrl: ctrl}
	mock.recorder = &MockKeySpaceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeySpaceProvider) EXPECT() *MockKeySpaceProviderMockRecorder {
	return m.recorder
}

// Alter mocks base method.
func (m *MockKeySpaceProvider) Alter(arg0 Context, arg1 KeySpaceKey, arg2 []Patch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Alter indicates an expected call of Alter.
func (mr *MockKeySpaceProviderMockRecorder) Alter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alter", reflect.TypeOf((*MockKeySpaceProvider)(nil).Alter), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockKeySpaceProvider) Create(arg0 Context, arg1 KeySpace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockKeySpaceProviderMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeySpaceProvider)(nil).Create), arg0, arg1)
}

// Drop mocks base method.
func (m *MockKeySpaceProvider) Drop(arg0 Context, arg1 KeySpaceKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockKeySpaceProviderMockRecorder) Drop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockKeySpaceProvider)(nil).Drop), arg0, arg1)
}

// Get mocks base method.
func (m *MockKeySpaceProvider) Get(arg0 Context, arg1 KeySpaceKey) (KeySpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(KeySpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeySpaceProviderMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeySpaceProvider)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockKeySpaceProvider) List(arg0 Context, arg1 KeySpace) (KeySpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(KeySpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKeySpaceProviderMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeySpaceProvider)(nil).List), arg0, arg1)
}

// MockTableProvider is a mock of TableProvider interface.
type MockTableProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTableProviderMockRecorder
}

// MockTableProviderMockRecorder is the mock recorder for MockTableProvider.
type MockTableProviderMockRecorder struct {
	mock *MockTableProvider
}

// NewMockTableProvider creates a new mock instance.
func NewMockTableProvider(ctrl *gomock.Controller) *MockTableProvider {
	mock := &MockTableProvider{ctrl: ctrl}
	mock.recorder = &MockTableProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableProvider) EXPECT() *MockTableProviderMockRecorder {
	return m.recorder
}

// Alter mocks base method.
func (m *MockTableProvider) Alter(arg0 Context, arg1 TableKey, arg2 []Patch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Alter indicates an expected call of Alter.
func (mr *MockTableProviderMockRecorder) Alter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alter", reflect.TypeOf((*MockTableProvider)(nil).Alter), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockTableProvider) Create(arg0 Context, arg1 Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTableProviderMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTableProvider)(nil).Create), arg0, arg1)
}

// Drop mocks base method.
func (m *MockTableProvider) Drop(arg0 Context, arg1 TableKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockTableProviderMockRecorder) Drop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockTableProvider)(nil).Drop), arg0, arg1)
}

// Get mocks base method.
func (m *MockTableProvider) Get(arg0 Context, arg1 TableKey) (Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTableProviderMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTableProvider)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockTableProvider) List(arg0 Context, arg1 Table) ([]Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTableProviderMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTableProvider)(nil).List), arg0, arg1)
}
