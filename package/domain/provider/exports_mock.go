// Code generated by MockGen. DO NOT EDIT.
// Source: exports.go

// Package provider is a generated GoMock package.
package provider

import (
	. "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	. "github.com/tilau2328/cql/package/domain/model"
	. "github.com/tilau2328/cql/package/shared/patch"
)

// MockDDL is a mock of DDL interface.
type MockDDL struct {
	ctrl     *gomock.Controller
	recorder *MockDDLMockRecorder
}

// MockDDLMockRecorder is the mock recorder for MockDDL.
type MockDDLMockRecorder struct {
	mock *MockDDL
}

// NewMockDDL creates a new mock instance.
func NewMockDDL(ctrl *gomock.Controller) *MockDDL {
	mock := &MockDDL{ctrl: ctrl}
	mock.recorder = &MockDDLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDDL) EXPECT() *MockDDLMockRecorder {
	return m.recorder
}

// AlterKeySpace mocks base method.
func (m *MockDDL) AlterKeySpace(arg0 Context, arg1 KeySpaceKey, arg2 []Patch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterKeySpace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterKeySpace indicates an expected call of AlterKeySpace.
func (mr *MockDDLMockRecorder) AlterKeySpace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterKeySpace", reflect.TypeOf((*MockDDL)(nil).AlterKeySpace), arg0, arg1, arg2)
}

// AlterTable mocks base method.
func (m *MockDDL) AlterTable(arg0 Context, arg1 TableKey, arg2 []Patch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterTable indicates an expected call of AlterTable.
func (mr *MockDDLMockRecorder) AlterTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterTable", reflect.TypeOf((*MockDDL)(nil).AlterTable), arg0, arg1, arg2)
}

// CreateKeySpace mocks base method.
func (m *MockDDL) CreateKeySpace(arg0 Context, arg1 KeySpace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeySpace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKeySpace indicates an expected call of CreateKeySpace.
func (mr *MockDDLMockRecorder) CreateKeySpace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeySpace", reflect.TypeOf((*MockDDL)(nil).CreateKeySpace), arg0, arg1)
}

// CreateTable mocks base method.
func (m *MockDDL) CreateTable(arg0 Context, arg1 Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDDLMockRecorder) CreateTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDDL)(nil).CreateTable), arg0, arg1)
}

// DropKeySpace mocks base method.
func (m *MockDDL) DropKeySpace(arg0 Context, arg1 KeySpaceKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeySpace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeySpace indicates an expected call of DropKeySpace.
func (mr *MockDDLMockRecorder) DropKeySpace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeySpace", reflect.TypeOf((*MockDDL)(nil).DropKeySpace), arg0, arg1)
}

// DropTable mocks base method.
func (m *MockDDL) DropTable(arg0 Context, arg1 TableKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockDDLMockRecorder) DropTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockDDL)(nil).DropTable), arg0, arg1)
}

// GetKeySpace mocks base method.
func (m *MockDDL) GetKeySpace(arg0 Context, arg1 KeySpaceKey) (KeySpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeySpace", arg0, arg1)
	ret0, _ := ret[0].(KeySpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeySpace indicates an expected call of GetKeySpace.
func (mr *MockDDLMockRecorder) GetKeySpace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeySpace", reflect.TypeOf((*MockDDL)(nil).GetKeySpace), arg0, arg1)
}

// GetTable mocks base method.
func (m *MockDDL) GetTable(arg0 Context, arg1 TableKey) (Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", arg0, arg1)
	ret0, _ := ret[0].(Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTable indicates an expected call of GetTable.
func (mr *MockDDLMockRecorder) GetTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockDDL)(nil).GetTable), arg0, arg1)
}

// ListKeySpace mocks base method.
func (m *MockDDL) ListKeySpace(arg0 Context, arg1 KeySpace) (KeySpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeySpace", arg0, arg1)
	ret0, _ := ret[0].(KeySpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeySpace indicates an expected call of ListKeySpace.
func (mr *MockDDLMockRecorder) ListKeySpace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeySpace", reflect.TypeOf((*MockDDL)(nil).ListKeySpace), arg0, arg1)
}

// ListTable mocks base method.
func (m *MockDDL) ListTable(arg0 Context, arg1 Table) ([]Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTable", arg0, arg1)
	ret0, _ := ret[0].([]Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTable indicates an expected call of ListTable.
func (mr *MockDDLMockRecorder) ListTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTable", reflect.TypeOf((*MockDDL)(nil).ListTable), arg0, arg1)
}

// MockDML is a mock of DML interface.
type MockDML struct {
	ctrl     *gomock.Controller
	recorder *MockDMLMockRecorder
}

// MockDMLMockRecorder is the mock recorder for MockDML.
type MockDMLMockRecorder struct {
	mock *MockDML
}

// NewMockDML creates a new mock instance.
func NewMockDML(ctrl *gomock.Controller) *MockDML {
	mock := &MockDML{ctrl: ctrl}
	mock.recorder = &MockDMLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDML) EXPECT() *MockDMLMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDML) Delete(arg0 Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDMLMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDML)(nil).Delete), arg0)
}

// Insert mocks base method.
func (m *MockDML) Insert(arg0 Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDMLMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDML)(nil).Insert), arg0)
}

// Select mocks base method.
func (m *MockDML) Select(arg0 Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockDMLMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDML)(nil).Select), arg0)
}

// Update mocks base method.
func (m *MockDML) Update(arg0 Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDMLMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDML)(nil).Update), arg0)
}
