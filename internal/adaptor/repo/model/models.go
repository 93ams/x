// Code generated by "gocqlx/cmd/schemagen"; DO NOT EDIT.

package model

import "github.com/scylladb/gocqlx/v2/table"

// Table models.
var (
	Aggregates = table.New(table.Metadata{
		Name: "system_schema.aggregates",
		Columns: []string{
			"aggregate_name",
			"argument_types",
			"final_func",
			"initcond",
			"keyspace_name",
			"return_type",
			"state_func",
			"state_type",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"aggregate_name",
			"argument_types",
		},
	})

	Columns = table.New(table.Metadata{
		Name: "system_schema.columns",
		Columns: []string{
			"clustering_order",
			"column_name",
			"column_name_bytes",
			"keyspace_name",
			"kind",
			"position",
			"table_name",
			"type",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"table_name",
			"column_name",
		},
	})

	ComputedColumns = table.New(table.Metadata{
		Name: "system_schema.computed_columns",
		Columns: []string{
			"column_name",
			"computation",
			"keyspace_name",
			"table_name",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"table_name",
			"column_name",
		},
	})

	DroppedColumns = table.New(table.Metadata{
		Name: "system_schema.dropped_columns",
		Columns: []string{
			"column_name",
			"dropped_time",
			"keyspace_name",
			"table_name",
			"type",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"table_name",
			"column_name",
		},
	})

	Functions = table.New(table.Metadata{
		Name: "system_schema.functions",
		Columns: []string{
			"argument_names",
			"argument_types",
			"body",
			"called_on_null_input",
			"function_name",
			"keyspace_name",
			"language",
			"return_type",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"function_name",
			"argument_types",
		},
	})

	Indexes = table.New(table.Metadata{
		Name: "system_schema.indexes",
		Columns: []string{
			"index_name",
			"keyspace_name",
			"kind",
			"options",
			"table_name",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"table_name",
			"index_name",
		},
	})

	Keyspaces = table.New(table.Metadata{
		Name: "system_schema.keyspaces",
		Columns: []string{
			"durable_writes",
			"keyspace_name",
			"replication",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{},
	})

	ScyllaTables = table.New(table.Metadata{
		Name: "system_schema.scylla_tables",
		Columns: []string{
			"cdc",
			"keyspace_name",
			"partitioner",
			"table_name",
			"version",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"table_name",
		},
	})

	Tables = table.New(table.Metadata{
		Name: "system_schema.tables",
		Columns: []string{
			"bloom_filter_fp_chance",
			"caching",
			"comment",
			"compaction",
			"compression",
			"crc_check_chance",
			"dclocal_read_repair_chance",
			"default_time_to_live",
			"extensions",
			"flags",
			"gc_grace_seconds",
			"id",
			"keyspace_name",
			"max_index_interval",
			"memtable_flush_period_in_ms",
			"min_index_interval",
			"read_repair_chance",
			"speculative_retry",
			"table_name",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"table_name",
		},
	})

	Triggers = table.New(table.Metadata{
		Name: "system_schema.triggers",
		Columns: []string{
			"keyspace_name",
			"options",
			"table_name",
			"trigger_name",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"table_name",
			"trigger_name",
		},
	})

	Types = table.New(table.Metadata{
		Name: "system_schema.types",
		Columns: []string{
			"field_names",
			"field_types",
			"keyspace_name",
			"type_name",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"type_name",
		},
	})

	ViewVirtualColumns = table.New(table.Metadata{
		Name: "system_schema.view_virtual_columns",
		Columns: []string{
			"clustering_order",
			"column_name",
			"column_name_bytes",
			"keyspace_name",
			"kind",
			"position",
			"table_name",
			"type",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"table_name",
			"column_name",
		},
	})

	Views = table.New(table.Metadata{
		Name: "system_schema.views",
		Columns: []string{
			"base_table_id",
			"base_table_name",
			"bloom_filter_fp_chance",
			"caching",
			"comment",
			"compaction",
			"compression",
			"crc_check_chance",
			"dclocal_read_repair_chance",
			"default_time_to_live",
			"extensions",
			"gc_grace_seconds",
			"id",
			"include_all_columns",
			"keyspace_name",
			"max_index_interval",
			"memtable_flush_period_in_ms",
			"min_index_interval",
			"read_repair_chance",
			"speculative_retry",
			"view_name",
			"where_clause",
		},
		PartKey: []string{
			"keyspace_name",
		},
		SortKey: []string{
			"view_name",
		},
	})
)
